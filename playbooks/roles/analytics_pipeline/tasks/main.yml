---
#
# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://github.com/edx/configuration/wiki
# code style: https://github.com/edx/configuration/wiki/Ansible-Coding-Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
#
#
# Tasks for role analytics_pipeline
# 
# Overview:
# 
# Prepare the machine to run the edX Analytics Data Pipeline. The pipeline currently "installs itself"
# via an ansible playbook that is not included in the edx/configuration repo. However, in order to
# run the pipeline in a devstack environment, some configuration needs to be performed. In a production
# environment many of these config files are stored on S3.
#
# Dependencies:
#
# common: some of the variables from the common role are used here
# hadoop_master: ensures hadoop services are installed
# hive: the pipeline makes extensive usage of hive, so that needs to be installed as well
# sqoop: similarly to hive, the pipeline uses this tool extensively
# 
# Example play:
#
# - name: Deploy all dependencies of edx-analytics-pipeline to the node
#   hosts: all
#   sudo: True
#   gather_facts: True
#   roles:
#     - analytics_pipeline
#
# ansible-playbook -i 'localhost,' ./analytics_pipeline.yml  -e@/ansible/vars/deployment.yml -e@/ansible/vars/env-deployment.yml
#

- name: ensure system packages are installed
  command: make system-requirements
  args:
    chdir: "{{ analytics_pipeline_code_dir }}"
  sudo: True
  tags:
    - install
    - install:system-requirements

- name: virtualenv installed
  pip:
    name: virtualenv
    version: 1.10.1
  tags:
    - install
    - install:system-requirements

- name: build virtualenv
  command: "virtualenv --python={{ ANALYTICS_PIPELINE_PYTHON }} {{ analytics_pipeline_venv_dir }}"
  args:
    creates: "{{ analytics_pipeline_venv_dir }}/bin/pip"
  become_user: "{{ analytics_pipeline_user }}"
  tags:
    - install
    - install:system-requirements

- name: pip upgraded
  shell: ". {{ analytics_pipeline_venv_dir }}/bin/activate && pip install -U pip"
  args:
    chdir: "{{ analytics_pipeline_code_dir }}"
  become_user: "{{ analytics_pipeline_user }}"
  environment: analytics_pipeline_install_env
  tags:
    - install
    - install:app-requirements

- name: installed
  shell: ". {{ analytics_pipeline_venv_dir }}/bin/activate && make install"
  args:
    chdir: "{{ analytics_pipeline_code_dir }}"
  become_user: "{{ analytics_pipeline_user }}"
  environment: analytics_pipeline_install_env
  tags:
    - install
    - install:app-requirements

- name: converted to development mode
  shell: ". {{ analytics_pipeline_venv_dir }}/bin/activate && make uninstall && make develop && make test-requirements"
  args:
    chdir: "{{ analytics_pipeline_code_dir }}"
  become_user: "{{ analytics_pipeline_user }}"
  environment: analytics_pipeline_install_env
  tags:
    - devstack
    - devstack:install

- name: create log directory
  file:
    path: "{{ analytics_pipeline_log_dir }}"
    mode: "0777"
    owner: "{{ analytics_pipeline_user }}"
    group: "{{ analytics_pipeline_user }}"
    state: directory
  tags:
    - install
    - install:configuration

- name: logging configured
  template:
    src: logging.cfg.j2
    dest: "{{ analytics_pipeline_code_dir }}/logging.cfg"
  tags:
    - install
    - install:configuration

- name: create config directory
  file:
    path: "{{ analytics_pipeline_config_dir }}"
    mode: "0755"
    owner: "{{ analytics_pipeline_user }}"
    group: "{{ analytics_pipeline_user }}"
    state: directory
  tags:
    - devstack
    - devstack:install

- name: luigi configuration directory created
  file:
    path: /etc/luigi
    state: directory
    mode: "0755"
  tags:
    - install
    - install:configuration

- name: luigi configuration file written
  template:
    src: client.cfg.j2
    dest: /etc/luigi/client.cfg
    mode: "0644"
  tags:
    - install
    - install:configuration

- name: util library source checked out
  git:
    dest: "{{ analytics_pipeline_util_library.path }}"
    repo: "{{ analytics_pipeline_util_library.repo }}"
    version: "{{ analytics_pipeline_util_library.version }}"
  tags:
    - devstack
    - devstack:install

- name: lib directory created
  file:
    path: "{{ HADOOP_COMMON_USER_HOME }}/lib"
    owner: "{{ hadoop_common_user }}"
    group: "{{ hadoop_common_group }}"
    state: directory
  tags:
    - devstack
    - devstack:install

- name: check if the util library needs to be built
  stat:
    path: "{{ HADOOP_COMMON_USER_HOME }}/lib/edx-analytics-hadoop-util.jar"
  register: util_lib_built
  tags:
    - devstack
    - devstack:install

- name: util library built
  shell: >
    {{ hadoop_common_java_home }}/bin/javac -cp `{{ HADOOP_COMMON_HOME }}/bin/hadoop classpath` org/edx/hadoop/input/ManifestTextInputFormat.java &&
    {{ hadoop_common_java_home }}/bin/jar cf {{ HADOOP_COMMON_USER_HOME }}/lib/edx-analytics-hadoop-util.jar org/edx/hadoop/input/ManifestTextInputFormat.class &&
    chown {{ hadoop_common_user }}:{{ hadoop_common_group }} {{ HADOOP_COMMON_USER_HOME }}/lib/edx-analytics-hadoop-util.jar
  args:
    chdir: "{{ analytics_pipeline_util_library.path }}"
  when: not util_lib_built.stat.exists
  tags:
    - devstack
    - devstack:install

- name: env vars sourced in hadoop env
  lineinfile:
    dest: "{{ hadoop_common_env }}"
    regexp: "^. {{ analytics_pipeline_venv_dir }}/bin/activate"
    line: ". {{ analytics_pipeline_venv_dir }}/bin/activate"
    state: present
  tags:
    - devstack
    - devstack:install

- name: write devstack script
  template:
    src: "edx/app/analytics_pipeline/docker-entrypoint.sh.j2"
    dest: "/docker-entrypoint.sh"
    mode: "0777"
  tags:
    - devstack
    - devstack:install

- name: store configuration for acceptance tests
  copy:
    src: acceptance.json
    dest: /var/tmp/acceptance.json
    mode: "0644"
  tags:
    - devstack
    - devstack:install
